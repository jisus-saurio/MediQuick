import jsonwebtoken from 'jsonwebtoken';
import { config } from '../config.js';

// Middleware que REQUIERE autenticaci√≥n
export const validateAuthToken = (allowedUserTypes = []) => {
    return (req, res, next) => {
        try {
            console.log('üîí Validando token requerido...');
            
            // Extraer el token de la cookie
            const { authToken } = req.cookies;

            // Error si no hay cookie
            if (!authToken) {
                console.log('‚ùå No hay token en cookies');
                return res.status(401).json({ 
                    message: 'No se encontr√≥ token de autenticaci√≥n, por favor inicie sesi√≥n.',
                    success: false,
                    requiresAuth: true
                });
            }

            // Verificar el token
            const decoded = jsonwebtoken.verify(authToken, config.JWT.SECRET);
            console.log('‚úÖ Token v√°lido:', decoded.userType);

            // Verificar permisos si se especificaron
            if (allowedUserTypes.length > 0 && !allowedUserTypes.includes(decoded.userType)) {
                console.log('‚ùå Permisos insuficientes');
                return res.status(403).json({ 
                    message: 'No tienes autorizaci√≥n para acceder a este recurso.',
                    success: false,
                    userType: decoded.userType
                });
            }

            // Agregar informaci√≥n del usuario al request
            req.user = {
                id: decoded.id,
                userType: decoded.userType,
                email: decoded.email
            };

            console.log('‚úÖ Usuario autenticado:', req.user);
            next();

        } catch (error) {
            console.log("‚ùå Error en validaci√≥n de token:", error.message);
            
            if (error.name === 'TokenExpiredError') {
                return res.status(401).json({ 
                    message: 'Token expirado, por favor inicie sesi√≥n nuevamente.',
                    success: false,
                    expired: true
                });
            }
            
            if (error.name === 'JsonWebTokenError') {
                return res.status(401).json({ 
                    message: 'Token inv√°lido.',
                    success: false
                });
            }

            return res.status(500).json({ 
                message: 'Error del servidor al validar autenticaci√≥n.',
                success: false
            });
        }
    }
}

// Middleware que NO requiere autenticaci√≥n (opcional)
export const optionalAuth = (req, res, next) => {
    try {
        console.log('üîì Verificando autenticaci√≥n opcional...');
        
        const { authToken } = req.cookies;
        
        if (authToken) {
            try {
                const decoded = jsonwebtoken.verify(authToken, config.JWT.SECRET);
                req.user = {
                    id: decoded.id,
                    userType: decoded.userType,
                    email: decoded.email
                };
                console.log('‚úÖ Usuario encontrado (opcional):', req.user.userType);
            } catch (error) {
                console.log('‚ö†Ô∏è Token inv√°lido o expirado, continuando sin autenticaci√≥n');
                req.user = null;
            }
        } else {
            console.log('‚ÑπÔ∏è No hay token, continuando sin autenticaci√≥n');
            req.user = null;
        }
        
        next();
        
    } catch (error) {
        console.log("‚ö†Ô∏è Error en autenticaci√≥n opcional, continuando sin autenticaci√≥n:", error.message);
        req.user = null;
        next();
    }
}